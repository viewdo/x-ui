/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ActionActivationStrategy, ActionTopicType, EventAction } from "./services/events";
import { RouterService } from "./services/routing";
import { VisitStrategy } from "./services/navigation";
import { DiscardStrategy, LoadStrategy } from "./services/audio";
import { AUDIO_COMMANDS } from "./services/audio/interfaces";
import { CookieConsent } from "./services/data";
export namespace Components {
    interface XAction {
        /**
          * The command to execute.
         */
        "command"?: string;
        /**
          * Get the underlying actionEvent instance. Used by the x-action-activator element.
         */
        "getAction": () => Promise<EventAction<any> | null>;
        /**
          * Send this action to the the action messaging system.
         */
        "sendAction": (data?: Record<string, any> | undefined) => Promise<void>;
        /**
          * This is the topic this action-command is targeting.  data: []
         */
        "topic"?: ActionTopicType;
    }
    interface XActionActivator {
        /**
          * The activation strategy to use for the contained actions. Values: 'OnElementEvent'|'OnEnter'|'AtTime'|'OnExit'
         */
        "activate": ActionActivationStrategy;
        "activateActions": () => Promise<void>;
        /**
          * Turn on debug statements for load, update and render events.
         */
        "debug": boolean;
        /**
          * The element to watch for events when using the OnElementEvent activation strategy. This element uses the HTML Element querySelector function to find the element.  For use with activate="OnElementEvent" Only!
         */
        "targetElement"?: string;
        /**
          * This is the name of the event to listen to on the target element.
         */
        "targetEvent": string;
        /**
          * The time, in seconds at which the contained actions should be submitted.  For use with activate="AtTime" Only!
         */
        "time"?: number;
    }
    interface XApp {
        /**
          * The interval, in milliseconds to use with the element-timer (used in place for a video) when timing animations in  x-app-view-do elements.
         */
        "animationInterval": number;
        /**
          * This is the application / site title. If the views or dos have titles, this is added as a suffix.
         */
        "appTitle"?: string;
        /**
          * Turn on debugging to get helpful messages from the routing, data and action systems.
         */
        "debug": boolean;
        /**
          * Use hash routes to on the client-side. Default is to use folder-paths. This requires a smart server-side proxy that rewrites all requests to the HTML file.
         */
        "hash": boolean;
        /**
          * The wait-time, in milliseconds to wait for un-registered data providers found in an expression. This is to accommodate a possible lag between evaluation before the first view-do 'when' predicate an the registration process.
         */
        "providerTimeout": number;
        /**
          * This is the root path that the actual page is, if it isn't '/', then the router needs to know where to begin creating paths.
         */
        "root": string;
        /**
          * This is the router service instantiated with this component.
         */
        "router": RouterService;
        /**
          * Header height or offset for scroll-top on this and all views.
         */
        "scrollTopOffset"?: number;
        /**
          * This is the start path a user should land on when they first land on this app.
         */
        "startUrl": string;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition"?: string;
    }
    interface XAppAnalytics {
    }
    interface XAppAutoplay {
        "classes"?: string;
        "inputId"?: string;
    }
    interface XAppLink {
        /**
          * The class to add when this HREF is active in the browser
         */
        "activeClass": string;
        "debug": boolean;
        /**
          * Only active on the exact href match no not on child routes
         */
        "exact": boolean;
        /**
          * The destination route for this link
         */
        "href": string;
        /**
          * Only active on the exact href match using every aspect of the URL.
         */
        "strict": boolean;
    }
    interface XAppTheme {
    }
    interface XAppThemeDark {
        /**
          * The class to add to the inner input.
         */
        "classes"?: string;
        /**
          * The inner input ID
         */
        "inputId"?: string;
    }
    interface XAppView {
        /**
          * Remote URL for this Route's content.
         */
        "contentSrc"?: string;
        /**
          * Turn on debug statements for load, update and render events.
         */
        "debug": boolean;
        /**
          * The url for this route should only be matched when it is exact.
         */
        "exact": boolean;
        /**
          * The title for this view. This is prefixed before the app title configured in x-app
         */
        "pageTitle": string;
        /**
          * The router-service instance  (internal)
         */
        "router": RouterService;
        /**
          * Header height or offset for scroll-top on this view.
         */
        "scrollTopOffset": number;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition"?: string;
        /**
          * The url for this route, including the parent's routes.
         */
        "url": string;
    }
    interface XAppViewDo {
        /**
          * Remote URL for this Route's content.
         */
        "contentSrc"?: string;
        /**
          * To debug timed elements, set this value to true.
         */
        "debug": boolean;
        /**
          * How should this page be presented (coming soon)
         */
        "display": 'page' | 'modal' | 'full';
        /**
          * The url for this route should only be matched when it is exact.
         */
        "exact": boolean;
        /**
          * When this value exists, the page will automatically progress when the duration in seconds has passed.
         */
        "nextAfter": number;
        /**
          * The title for this view. This is prefixed before the app title configured in x-app
         */
        "pageTitle": string;
        /**
          * Header height or offset for scroll-top on this view.
         */
        "scrollTopOffset"?: number;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition"?: string;
        /**
          * The url for this route, including the parent's routes.
         */
        "url": string;
        /**
          * Provider the end event name. Default is ended
         */
        "videoEndEvent": string;
        /**
          * Provide the element selector for the providing media object that can provide time and end events. Default is video
         */
        "videoTarget": string;
        /**
          * Provide the time-event name. Default is timeupdate
         */
        "videoTimeEvent": string;
        /**
          * The visit strategy for this do. once: persist the visit and never force it again always: do not persist, but don't don't show again in-session optional: do not force this view-do ever. It will be available by URL
         */
        "visit": VisitStrategy;
        /**
          * If present, the expression must evaluate to true for this route to be sequenced by the parent view. The existence of this value overrides the visit strategy
         */
        "when"?: string;
    }
    interface XAudioEnabled {
        /**
          * Any classes to add to the input-element directly.
         */
        "classes"?: string;
        /**
          * The id field to add to the input-element directly.
         */
        "inputId"?: string;
    }
    interface XAudioMusicAction {
        /**
          * The command to execute.
         */
        "command": 'start' | 'pause' | 'resume' | 'mute' | 'volume' | 'seek';
        /**
          * Get the underlying actionEvent instance. Used by the x-action-activator element.
         */
        "getAction": () => Promise<EventAction<any>>;
        /**
          * Send this action to the the action messaging system.
         */
        "sendAction": (data?: Record<string, any> | undefined) => Promise<void>;
        /**
          * The track to target.
         */
        "trackId"?: string;
        /**
          * The value payload for the command.
         */
        "value"?: string | boolean | number;
    }
    interface XAudioMusicLoad {
        /**
          * The discard strategy the player should use for this file.
         */
        "discard": DiscardStrategy;
        /**
          * Set this to true to have the audio file loop.
         */
        "loop": boolean;
        /**
          * This is the topic this action-command is targeting.
         */
        "mode": LoadStrategy;
        /**
          * The path to the audio-file.
          * @required
         */
        "src": string;
        /**
          * Set this attribute to have the audio file tracked in session effectively preventing it from playing again..
         */
        "track": boolean;
        /**
          * The identifier for this music track
         */
        "trackId": string;
    }
    interface XAudioPlayer {
        /**
          * Use debug for verbose logging. Useful for figuring thing out.
         */
        "debug": boolean;
        /**
          * The display mode for this player. The display is merely a facade to manage basic controls. No track information or duration will be displayed.
         */
        "display": boolean;
    }
    interface XAudioSoundAction {
        /**
          * The command to execute.
         */
        "command": AUDIO_COMMANDS;
        /**
          * Get the underlying actionEvent instance. Used by the x-action-activator element.
         */
        "getAction": () => Promise<EventAction<any>>;
        /**
          * Send this action to the the action messaging system.
         */
        "sendAction": (data?: Record<string, any> | undefined) => Promise<void>;
        /**
          * The track to target.
         */
        "trackId"?: string;
        /**
          * The value payload for the command.
         */
        "value"?: string | boolean | number;
    }
    interface XAudioSoundLoad {
        /**
          * The discard strategy the player should use for this file.
         */
        "discard": DiscardStrategy;
        /**
          * This is the topic this action-command is targeting.
         */
        "mode": LoadStrategy;
        /**
          * The path to the audio-file.
         */
        "src": string;
        /**
          * Set this attribute to have the audio file tracked in session effectively preventing it from playing again..
         */
        "track": boolean;
        /**
          * The identifier for this music track
         */
        "trackId": string;
    }
    interface XContentInclude {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad": boolean;
        /**
          * Remote Template URL
         */
        "src": string;
    }
    interface XContentMarkdown {
        /**
          * Base Url for embedded links
         */
        "baseUrl"?: string;
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad": boolean;
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "renderIf"?: string;
        /**
          * Remote Template URL
         */
        "src"?: string;
    }
    interface XContentReference {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad": boolean;
        /**
          * When inline the link/script tags are rendered in-place rather than added to the head.
         */
        "inline": boolean;
        /**
          * Import the script file as a module.
         */
        "module": boolean;
        /**
          * Declare the script only for use when modules aren't supported
         */
        "noModule": boolean;
        /**
          * The script file to reference.
         */
        "scriptSrc"?: string;
        /**
          * The css file to reference
         */
        "styleSrc"?: string;
    }
    interface XDataDisplay {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad": boolean;
        /**
          * The data expression to obtain a value for rendering as inner-text for this element. {{session:user.name}}
          * @default null
         */
        "text"?: string;
    }
    interface XDataProviderCookie {
        /**
          * An expression that tells this component how to determine if the user has previously consented. {{{storage:consented}}}
         */
        "hideWhen"?: string;
        /**
          * When skipConsent is true, the accept-cookies banner will not be displayed before accessing cookie-data.
         */
        "skipConsent": boolean;
    }
    interface XDataProviderSession {
        /**
          * The key prefix to use in storage
         */
        "keyPrefix"?: string;
        /**
          * Provider name to use in x-ui expressions.
         */
        "name": string;
    }
    interface XDataProviderStorage {
        /**
          * The key prefix to use in storage
         */
        "keyPrefix"?: string;
        /**
          * Provider name to use in x-ui expressions.
         */
        "name": string;
    }
    interface XDataRepeat {
        /**
          * Turn on debug statements for load, update and render events.
         */
        "debug": boolean;
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad": boolean;
        /**
          * The JSONata query to filter the json items see <https://try.jsonata.org> for more info.
         */
        "filter"?: string;
        /**
          * The array-string or data expression to obtain a collection for rendering the template. {{session:cart.items}}
         */
        "items"?: string;
        /**
          * The URL to remote JSON collection to use for the items.
          * @example /data.json
         */
        "itemsSrc"?: string;
    }
    interface XDataShow {
        /**
          * The data expression to obtain a predicate for conditionally rendering the inner-contents of this element. {{session:user.name}}
         */
        "when": string;
    }
}
declare global {
    interface HTMLXActionElement extends Components.XAction, HTMLStencilElement {
    }
    var HTMLXActionElement: {
        prototype: HTMLXActionElement;
        new (): HTMLXActionElement;
    };
    interface HTMLXActionActivatorElement extends Components.XActionActivator, HTMLStencilElement {
    }
    var HTMLXActionActivatorElement: {
        prototype: HTMLXActionActivatorElement;
        new (): HTMLXActionActivatorElement;
    };
    interface HTMLXAppElement extends Components.XApp, HTMLStencilElement {
    }
    var HTMLXAppElement: {
        prototype: HTMLXAppElement;
        new (): HTMLXAppElement;
    };
    interface HTMLXAppAnalyticsElement extends Components.XAppAnalytics, HTMLStencilElement {
    }
    var HTMLXAppAnalyticsElement: {
        prototype: HTMLXAppAnalyticsElement;
        new (): HTMLXAppAnalyticsElement;
    };
    interface HTMLXAppAutoplayElement extends Components.XAppAutoplay, HTMLStencilElement {
    }
    var HTMLXAppAutoplayElement: {
        prototype: HTMLXAppAutoplayElement;
        new (): HTMLXAppAutoplayElement;
    };
    interface HTMLXAppLinkElement extends Components.XAppLink, HTMLStencilElement {
    }
    var HTMLXAppLinkElement: {
        prototype: HTMLXAppLinkElement;
        new (): HTMLXAppLinkElement;
    };
    interface HTMLXAppThemeElement extends Components.XAppTheme, HTMLStencilElement {
    }
    var HTMLXAppThemeElement: {
        prototype: HTMLXAppThemeElement;
        new (): HTMLXAppThemeElement;
    };
    interface HTMLXAppThemeDarkElement extends Components.XAppThemeDark, HTMLStencilElement {
    }
    var HTMLXAppThemeDarkElement: {
        prototype: HTMLXAppThemeDarkElement;
        new (): HTMLXAppThemeDarkElement;
    };
    interface HTMLXAppViewElement extends Components.XAppView, HTMLStencilElement {
    }
    var HTMLXAppViewElement: {
        prototype: HTMLXAppViewElement;
        new (): HTMLXAppViewElement;
    };
    interface HTMLXAppViewDoElement extends Components.XAppViewDo, HTMLStencilElement {
    }
    var HTMLXAppViewDoElement: {
        prototype: HTMLXAppViewDoElement;
        new (): HTMLXAppViewDoElement;
    };
    interface HTMLXAudioEnabledElement extends Components.XAudioEnabled, HTMLStencilElement {
    }
    var HTMLXAudioEnabledElement: {
        prototype: HTMLXAudioEnabledElement;
        new (): HTMLXAudioEnabledElement;
    };
    interface HTMLXAudioMusicActionElement extends Components.XAudioMusicAction, HTMLStencilElement {
    }
    var HTMLXAudioMusicActionElement: {
        prototype: HTMLXAudioMusicActionElement;
        new (): HTMLXAudioMusicActionElement;
    };
    interface HTMLXAudioMusicLoadElement extends Components.XAudioMusicLoad, HTMLStencilElement {
    }
    var HTMLXAudioMusicLoadElement: {
        prototype: HTMLXAudioMusicLoadElement;
        new (): HTMLXAudioMusicLoadElement;
    };
    interface HTMLXAudioPlayerElement extends Components.XAudioPlayer, HTMLStencilElement {
    }
    var HTMLXAudioPlayerElement: {
        prototype: HTMLXAudioPlayerElement;
        new (): HTMLXAudioPlayerElement;
    };
    interface HTMLXAudioSoundActionElement extends Components.XAudioSoundAction, HTMLStencilElement {
    }
    var HTMLXAudioSoundActionElement: {
        prototype: HTMLXAudioSoundActionElement;
        new (): HTMLXAudioSoundActionElement;
    };
    interface HTMLXAudioSoundLoadElement extends Components.XAudioSoundLoad, HTMLStencilElement {
    }
    var HTMLXAudioSoundLoadElement: {
        prototype: HTMLXAudioSoundLoadElement;
        new (): HTMLXAudioSoundLoadElement;
    };
    interface HTMLXContentIncludeElement extends Components.XContentInclude, HTMLStencilElement {
    }
    var HTMLXContentIncludeElement: {
        prototype: HTMLXContentIncludeElement;
        new (): HTMLXContentIncludeElement;
    };
    interface HTMLXContentMarkdownElement extends Components.XContentMarkdown, HTMLStencilElement {
    }
    var HTMLXContentMarkdownElement: {
        prototype: HTMLXContentMarkdownElement;
        new (): HTMLXContentMarkdownElement;
    };
    interface HTMLXContentReferenceElement extends Components.XContentReference, HTMLStencilElement {
    }
    var HTMLXContentReferenceElement: {
        prototype: HTMLXContentReferenceElement;
        new (): HTMLXContentReferenceElement;
    };
    interface HTMLXDataDisplayElement extends Components.XDataDisplay, HTMLStencilElement {
    }
    var HTMLXDataDisplayElement: {
        prototype: HTMLXDataDisplayElement;
        new (): HTMLXDataDisplayElement;
    };
    interface HTMLXDataProviderCookieElement extends Components.XDataProviderCookie, HTMLStencilElement {
    }
    var HTMLXDataProviderCookieElement: {
        prototype: HTMLXDataProviderCookieElement;
        new (): HTMLXDataProviderCookieElement;
    };
    interface HTMLXDataProviderSessionElement extends Components.XDataProviderSession, HTMLStencilElement {
    }
    var HTMLXDataProviderSessionElement: {
        prototype: HTMLXDataProviderSessionElement;
        new (): HTMLXDataProviderSessionElement;
    };
    interface HTMLXDataProviderStorageElement extends Components.XDataProviderStorage, HTMLStencilElement {
    }
    var HTMLXDataProviderStorageElement: {
        prototype: HTMLXDataProviderStorageElement;
        new (): HTMLXDataProviderStorageElement;
    };
    interface HTMLXDataRepeatElement extends Components.XDataRepeat, HTMLStencilElement {
    }
    var HTMLXDataRepeatElement: {
        prototype: HTMLXDataRepeatElement;
        new (): HTMLXDataRepeatElement;
    };
    interface HTMLXDataShowElement extends Components.XDataShow, HTMLStencilElement {
    }
    var HTMLXDataShowElement: {
        prototype: HTMLXDataShowElement;
        new (): HTMLXDataShowElement;
    };
    interface HTMLElementTagNameMap {
        "x-action": HTMLXActionElement;
        "x-action-activator": HTMLXActionActivatorElement;
        "x-app": HTMLXAppElement;
        "x-app-analytics": HTMLXAppAnalyticsElement;
        "x-app-autoplay": HTMLXAppAutoplayElement;
        "x-app-link": HTMLXAppLinkElement;
        "x-app-theme": HTMLXAppThemeElement;
        "x-app-theme-dark": HTMLXAppThemeDarkElement;
        "x-app-view": HTMLXAppViewElement;
        "x-app-view-do": HTMLXAppViewDoElement;
        "x-audio-enabled": HTMLXAudioEnabledElement;
        "x-audio-music-action": HTMLXAudioMusicActionElement;
        "x-audio-music-load": HTMLXAudioMusicLoadElement;
        "x-audio-player": HTMLXAudioPlayerElement;
        "x-audio-sound-action": HTMLXAudioSoundActionElement;
        "x-audio-sound-load": HTMLXAudioSoundLoadElement;
        "x-content-include": HTMLXContentIncludeElement;
        "x-content-markdown": HTMLXContentMarkdownElement;
        "x-content-reference": HTMLXContentReferenceElement;
        "x-data-display": HTMLXDataDisplayElement;
        "x-data-provider-cookie": HTMLXDataProviderCookieElement;
        "x-data-provider-session": HTMLXDataProviderSessionElement;
        "x-data-provider-storage": HTMLXDataProviderStorageElement;
        "x-data-repeat": HTMLXDataRepeatElement;
        "x-data-show": HTMLXDataShowElement;
    }
}
declare namespace LocalJSX {
    interface XAction {
        /**
          * The command to execute.
         */
        "command"?: string;
        /**
          * This is the topic this action-command is targeting.  data: []
         */
        "topic"?: ActionTopicType;
    }
    interface XActionActivator {
        /**
          * The activation strategy to use for the contained actions. Values: 'OnElementEvent'|'OnEnter'|'AtTime'|'OnExit'
         */
        "activate"?: ActionActivationStrategy;
        /**
          * Turn on debug statements for load, update and render events.
         */
        "debug"?: boolean;
        /**
          * The element to watch for events when using the OnElementEvent activation strategy. This element uses the HTML Element querySelector function to find the element.  For use with activate="OnElementEvent" Only!
         */
        "targetElement"?: string;
        /**
          * This is the name of the event to listen to on the target element.
         */
        "targetEvent"?: string;
        /**
          * The time, in seconds at which the contained actions should be submitted.  For use with activate="AtTime" Only!
         */
        "time"?: number;
    }
    interface XApp {
        /**
          * The interval, in milliseconds to use with the element-timer (used in place for a video) when timing animations in  x-app-view-do elements.
         */
        "animationInterval"?: number;
        /**
          * This is the application / site title. If the views or dos have titles, this is added as a suffix.
         */
        "appTitle"?: string;
        /**
          * Turn on debugging to get helpful messages from the routing, data and action systems.
         */
        "debug"?: boolean;
        /**
          * Use hash routes to on the client-side. Default is to use folder-paths. This requires a smart server-side proxy that rewrites all requests to the HTML file.
         */
        "hash"?: boolean;
        /**
          * These events are **`<x-app>`** command-requests for action handlers to perform tasks. Any handles should cancel the event.
         */
        "onX:actions"?: (event: CustomEvent<any>) => void;
        /**
          * Listen for events that occurred within the **`<x-app>`** system.
         */
        "onX:events"?: (event: CustomEvent<any>) => void;
        /**
          * The wait-time, in milliseconds to wait for un-registered data providers found in an expression. This is to accommodate a possible lag between evaluation before the first view-do 'when' predicate an the registration process.
         */
        "providerTimeout"?: number;
        /**
          * This is the root path that the actual page is, if it isn't '/', then the router needs to know where to begin creating paths.
         */
        "root"?: string;
        /**
          * This is the router service instantiated with this component.
         */
        "router": RouterService;
        /**
          * Header height or offset for scroll-top on this and all views.
         */
        "scrollTopOffset"?: number;
        /**
          * This is the start path a user should land on when they first land on this app.
         */
        "startUrl"?: string;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition"?: string;
    }
    interface XAppAnalytics {
        /**
          * Page views.
         */
        "onPage-view"?: (event: CustomEvent<any>) => void;
        /**
          * Raised analytics events.
         */
        "onX:analytics:event"?: (event: CustomEvent<any>) => void;
        /**
          * View percentage views.
         */
        "onX:analytics:view-percentage"?: (event: CustomEvent<any>) => void;
    }
    interface XAppAutoplay {
        "classes"?: string;
        "inputId"?: string;
    }
    interface XAppLink {
        /**
          * The class to add when this HREF is active in the browser
         */
        "activeClass"?: string;
        "debug"?: boolean;
        /**
          * Only active on the exact href match no not on child routes
         */
        "exact"?: boolean;
        /**
          * The destination route for this link
         */
        "href": string;
        /**
          * Only active on the exact href match using every aspect of the URL.
         */
        "strict"?: boolean;
    }
    interface XAppTheme {
    }
    interface XAppThemeDark {
        /**
          * The class to add to the inner input.
         */
        "classes"?: string;
        /**
          * The inner input ID
         */
        "inputId"?: string;
    }
    interface XAppView {
        /**
          * Remote URL for this Route's content.
         */
        "contentSrc"?: string;
        /**
          * Turn on debug statements for load, update and render events.
         */
        "debug"?: boolean;
        /**
          * The url for this route should only be matched when it is exact.
         */
        "exact"?: boolean;
        /**
          * The title for this view. This is prefixed before the app title configured in x-app
         */
        "pageTitle"?: string;
        /**
          * The router-service instance  (internal)
         */
        "router": RouterService;
        /**
          * Header height or offset for scroll-top on this view.
         */
        "scrollTopOffset"?: number;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition"?: string;
        /**
          * The url for this route, including the parent's routes.
         */
        "url": string;
    }
    interface XAppViewDo {
        /**
          * Remote URL for this Route's content.
         */
        "contentSrc"?: string;
        /**
          * To debug timed elements, set this value to true.
         */
        "debug"?: boolean;
        /**
          * How should this page be presented (coming soon)
         */
        "display"?: 'page' | 'modal' | 'full';
        /**
          * The url for this route should only be matched when it is exact.
         */
        "exact"?: boolean;
        /**
          * When this value exists, the page will automatically progress when the duration in seconds has passed.
         */
        "nextAfter"?: number;
        /**
          * The title for this view. This is prefixed before the app title configured in x-app
         */
        "pageTitle"?: string;
        /**
          * Header height or offset for scroll-top on this view.
         */
        "scrollTopOffset"?: number;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition"?: string;
        /**
          * The url for this route, including the parent's routes.
         */
        "url": string;
        /**
          * Provider the end event name. Default is ended
         */
        "videoEndEvent"?: string;
        /**
          * Provide the element selector for the providing media object that can provide time and end events. Default is video
         */
        "videoTarget"?: string;
        /**
          * Provide the time-event name. Default is timeupdate
         */
        "videoTimeEvent"?: string;
        /**
          * The visit strategy for this do. once: persist the visit and never force it again always: do not persist, but don't don't show again in-session optional: do not force this view-do ever. It will be available by URL
         */
        "visit"?: VisitStrategy;
        /**
          * If present, the expression must evaluate to true for this route to be sequenced by the parent view. The existence of this value overrides the visit strategy
         */
        "when"?: string;
    }
    interface XAudioEnabled {
        /**
          * Any classes to add to the input-element directly.
         */
        "classes"?: string;
        /**
          * The id field to add to the input-element directly.
         */
        "inputId"?: string;
    }
    interface XAudioMusicAction {
        /**
          * The command to execute.
         */
        "command": 'start' | 'pause' | 'resume' | 'mute' | 'volume' | 'seek';
        /**
          * The track to target.
         */
        "trackId"?: string;
        /**
          * The value payload for the command.
         */
        "value"?: string | boolean | number;
    }
    interface XAudioMusicLoad {
        /**
          * The discard strategy the player should use for this file.
         */
        "discard"?: DiscardStrategy;
        /**
          * Set this to true to have the audio file loop.
         */
        "loop"?: boolean;
        /**
          * This is the topic this action-command is targeting.
         */
        "mode"?: LoadStrategy;
        /**
          * The path to the audio-file.
          * @required
         */
        "src": string;
        /**
          * Set this attribute to have the audio file tracked in session effectively preventing it from playing again..
         */
        "track"?: boolean;
        /**
          * The identifier for this music track
         */
        "trackId": string;
    }
    interface XAudioPlayer {
        /**
          * Use debug for verbose logging. Useful for figuring thing out.
         */
        "debug"?: boolean;
        /**
          * The display mode for this player. The display is merely a facade to manage basic controls. No track information or duration will be displayed.
         */
        "display"?: boolean;
    }
    interface XAudioSoundAction {
        /**
          * The command to execute.
         */
        "command"?: AUDIO_COMMANDS;
        /**
          * The track to target.
         */
        "trackId"?: string;
        /**
          * The value payload for the command.
         */
        "value"?: string | boolean | number;
    }
    interface XAudioSoundLoad {
        /**
          * The discard strategy the player should use for this file.
         */
        "discard"?: DiscardStrategy;
        /**
          * This is the topic this action-command is targeting.
         */
        "mode"?: LoadStrategy;
        /**
          * The path to the audio-file.
         */
        "src": string;
        /**
          * Set this attribute to have the audio file tracked in session effectively preventing it from playing again..
         */
        "track"?: boolean;
        /**
          * The identifier for this music track
         */
        "trackId": string;
    }
    interface XContentInclude {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad"?: boolean;
        /**
          * Remote Template URL
         */
        "src": string;
    }
    interface XContentMarkdown {
        /**
          * Base Url for embedded links
         */
        "baseUrl"?: string;
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad"?: boolean;
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "renderIf"?: string;
        /**
          * Remote Template URL
         */
        "src"?: string;
    }
    interface XContentReference {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad"?: boolean;
        /**
          * When inline the link/script tags are rendered in-place rather than added to the head.
         */
        "inline"?: boolean;
        /**
          * Import the script file as a module.
         */
        "module": boolean;
        /**
          * Declare the script only for use when modules aren't supported
         */
        "noModule"?: boolean;
        /**
          * The script file to reference.
         */
        "scriptSrc"?: string;
        /**
          * The css file to reference
         */
        "styleSrc"?: string;
    }
    interface XDataDisplay {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad"?: boolean;
        /**
          * The data expression to obtain a value for rendering as inner-text for this element. {{session:user.name}}
          * @default null
         */
        "text"?: string;
    }
    interface XDataProviderCookie {
        /**
          * An expression that tells this component how to determine if the user has previously consented. {{{storage:consented}}}
         */
        "hideWhen"?: string;
        /**
          * This event is raised when the consents to cookies.
         */
        "onDidConsent"?: (event: CustomEvent<CookieConsent>) => void;
        /**
          * When skipConsent is true, the accept-cookies banner will not be displayed before accessing cookie-data.
         */
        "skipConsent"?: boolean;
    }
    interface XDataProviderSession {
        /**
          * The key prefix to use in storage
         */
        "keyPrefix"?: string;
        /**
          * Provider name to use in x-ui expressions.
         */
        "name"?: string;
    }
    interface XDataProviderStorage {
        /**
          * The key prefix to use in storage
         */
        "keyPrefix"?: string;
        /**
          * Provider name to use in x-ui expressions.
         */
        "name"?: string;
    }
    interface XDataRepeat {
        /**
          * Turn on debug statements for load, update and render events.
         */
        "debug"?: boolean;
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "deferLoad"?: boolean;
        /**
          * The JSONata query to filter the json items see <https://try.jsonata.org> for more info.
         */
        "filter"?: string;
        /**
          * The array-string or data expression to obtain a collection for rendering the template. {{session:cart.items}}
         */
        "items"?: string;
        /**
          * The URL to remote JSON collection to use for the items.
          * @example /data.json
         */
        "itemsSrc"?: string;
    }
    interface XDataShow {
        /**
          * The data expression to obtain a predicate for conditionally rendering the inner-contents of this element. {{session:user.name}}
         */
        "when": string;
    }
    interface IntrinsicElements {
        "x-action": XAction;
        "x-action-activator": XActionActivator;
        "x-app": XApp;
        "x-app-analytics": XAppAnalytics;
        "x-app-autoplay": XAppAutoplay;
        "x-app-link": XAppLink;
        "x-app-theme": XAppTheme;
        "x-app-theme-dark": XAppThemeDark;
        "x-app-view": XAppView;
        "x-app-view-do": XAppViewDo;
        "x-audio-enabled": XAudioEnabled;
        "x-audio-music-action": XAudioMusicAction;
        "x-audio-music-load": XAudioMusicLoad;
        "x-audio-player": XAudioPlayer;
        "x-audio-sound-action": XAudioSoundAction;
        "x-audio-sound-load": XAudioSoundLoad;
        "x-content-include": XContentInclude;
        "x-content-markdown": XContentMarkdown;
        "x-content-reference": XContentReference;
        "x-data-display": XDataDisplay;
        "x-data-provider-cookie": XDataProviderCookie;
        "x-data-provider-session": XDataProviderSession;
        "x-data-provider-storage": XDataProviderStorage;
        "x-data-repeat": XDataRepeat;
        "x-data-show": XDataShow;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "x-action": LocalJSX.XAction & JSXBase.HTMLAttributes<HTMLXActionElement>;
            "x-action-activator": LocalJSX.XActionActivator & JSXBase.HTMLAttributes<HTMLXActionActivatorElement>;
            "x-app": LocalJSX.XApp & JSXBase.HTMLAttributes<HTMLXAppElement>;
            "x-app-analytics": LocalJSX.XAppAnalytics & JSXBase.HTMLAttributes<HTMLXAppAnalyticsElement>;
            "x-app-autoplay": LocalJSX.XAppAutoplay & JSXBase.HTMLAttributes<HTMLXAppAutoplayElement>;
            "x-app-link": LocalJSX.XAppLink & JSXBase.HTMLAttributes<HTMLXAppLinkElement>;
            "x-app-theme": LocalJSX.XAppTheme & JSXBase.HTMLAttributes<HTMLXAppThemeElement>;
            "x-app-theme-dark": LocalJSX.XAppThemeDark & JSXBase.HTMLAttributes<HTMLXAppThemeDarkElement>;
            "x-app-view": LocalJSX.XAppView & JSXBase.HTMLAttributes<HTMLXAppViewElement>;
            "x-app-view-do": LocalJSX.XAppViewDo & JSXBase.HTMLAttributes<HTMLXAppViewDoElement>;
            "x-audio-enabled": LocalJSX.XAudioEnabled & JSXBase.HTMLAttributes<HTMLXAudioEnabledElement>;
            "x-audio-music-action": LocalJSX.XAudioMusicAction & JSXBase.HTMLAttributes<HTMLXAudioMusicActionElement>;
            "x-audio-music-load": LocalJSX.XAudioMusicLoad & JSXBase.HTMLAttributes<HTMLXAudioMusicLoadElement>;
            "x-audio-player": LocalJSX.XAudioPlayer & JSXBase.HTMLAttributes<HTMLXAudioPlayerElement>;
            "x-audio-sound-action": LocalJSX.XAudioSoundAction & JSXBase.HTMLAttributes<HTMLXAudioSoundActionElement>;
            "x-audio-sound-load": LocalJSX.XAudioSoundLoad & JSXBase.HTMLAttributes<HTMLXAudioSoundLoadElement>;
            "x-content-include": LocalJSX.XContentInclude & JSXBase.HTMLAttributes<HTMLXContentIncludeElement>;
            "x-content-markdown": LocalJSX.XContentMarkdown & JSXBase.HTMLAttributes<HTMLXContentMarkdownElement>;
            "x-content-reference": LocalJSX.XContentReference & JSXBase.HTMLAttributes<HTMLXContentReferenceElement>;
            "x-data-display": LocalJSX.XDataDisplay & JSXBase.HTMLAttributes<HTMLXDataDisplayElement>;
            "x-data-provider-cookie": LocalJSX.XDataProviderCookie & JSXBase.HTMLAttributes<HTMLXDataProviderCookieElement>;
            "x-data-provider-session": LocalJSX.XDataProviderSession & JSXBase.HTMLAttributes<HTMLXDataProviderSessionElement>;
            "x-data-provider-storage": LocalJSX.XDataProviderStorage & JSXBase.HTMLAttributes<HTMLXDataProviderStorageElement>;
            "x-data-repeat": LocalJSX.XDataRepeat & JSXBase.HTMLAttributes<HTMLXDataRepeatElement>;
            "x-data-show": LocalJSX.XDataShow & JSXBase.HTMLAttributes<HTMLXDataShowElement>;
        }
    }
}
