/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Namespace } from "./models/namespace";
import { Experience } from ".";
import { Comparison } from "./services/data/parser";
export namespace Components {
    interface ContentScene {
    }
    interface DxpActionListener {
        /**
          * When debug is true, a reactive table of values is displayed.
         */
        "debug": boolean;
        /**
          * Customize the name used for this sample data provider.
         */
        "name": string;
    }
    interface DxpData {
        /**
          * A default value to display if the data in get is not found.
         */
        "default"?: string;
        /**
          * The JS-based expression to capture data from the above model.
          * @example experience.data.color
         */
        "get": string;
        /**
          * A pipe separated list of modifier expressions to modify the captured data. clip: length    truncate: length   date   format: expression   lowercase   uppercase   capitalize   size   encode   currency
          * @example clip:5|capitalize
         */
        "modify"?: string;
    }
    interface DxpDataProvider {
    }
    interface DxpDirectScene {
        "tocOptions": object;
    }
    interface DxpExperience {
        /**
          * Enable Debug mode to prevent API calls. (falls back to ?debug )
          * @default false
         */
        "debug": boolean;
        /**
          * Display mode for this element.
          * @default none
         */
        "display": 'logo' | 'debug' | 'none';
        /**
          * Experience data (bypasses XAPI to retrieve it)
         */
        "experienceData": string;
        /**
          * This method waits for the experience.
         */
        "getExperience": (timeout: number) => Promise<Experience | void>;
        /**
          * Enable Debug mode to prevent API calls.
          * @default false
         */
        "loadAssets": boolean;
        /**
          * The platform environment target. (optional)
         */
        "namespace": Namespace;
        /**
          * Enable preview mode to fake data and prevent API calls. (falls back to ?preview )
          * @default false
         */
        "preview": boolean;
        /**
          * This method resets the stored session-id & experience-key, effectively resetting the current experience. Useful for testing or dynamically switching experiences in-page.
         */
        "reset": () => Promise<void>;
        /**
          * Story Key (falls back to ?storyKey )
         */
        "storyKey": string;
        /**
          * User Key (falls back to ?userKey )
         */
        "userKey": string;
        /**
          * Experience API Url (optional)
         */
        "xapiUrl": string;
    }
    interface DxpExperienceDemo {
    }
    interface DxpFormScene {
    }
    interface DxpShow {
        /**
          * A JS-based expression to capture data from the the data model.
          * @example : experience.data.color
         */
        "if": string;
        /**
          * The optional comparison operator. If omitted, general ‘truthiness’ is used.
          * @requires to
         */
        "is": Comparison;
        /**
          * The optional value for comparison.
          * @requires is
         */
        "to": any;
    }
    interface DxpTocScene {
        "tocOptions": object;
    }
    interface DxpVideoPlayer {
        "youtubeId": string;
    }
    interface DxpVideoScene {
        "buttonLabel": string;
        "ccUrl": string;
        "mainTitle": string;
        "posterUrl": string;
        "subtitle": string;
        "videoUrl": string;
    }
}
declare global {
    interface HTMLContentSceneElement extends Components.ContentScene, HTMLStencilElement {
    }
    var HTMLContentSceneElement: {
        prototype: HTMLContentSceneElement;
        new (): HTMLContentSceneElement;
    };
    interface HTMLDxpActionListenerElement extends Components.DxpActionListener, HTMLStencilElement {
    }
    var HTMLDxpActionListenerElement: {
        prototype: HTMLDxpActionListenerElement;
        new (): HTMLDxpActionListenerElement;
    };
    interface HTMLDxpDataElement extends Components.DxpData, HTMLStencilElement {
    }
    var HTMLDxpDataElement: {
        prototype: HTMLDxpDataElement;
        new (): HTMLDxpDataElement;
    };
    interface HTMLDxpDataProviderElement extends Components.DxpDataProvider, HTMLStencilElement {
    }
    var HTMLDxpDataProviderElement: {
        prototype: HTMLDxpDataProviderElement;
        new (): HTMLDxpDataProviderElement;
    };
    interface HTMLDxpDirectSceneElement extends Components.DxpDirectScene, HTMLStencilElement {
    }
    var HTMLDxpDirectSceneElement: {
        prototype: HTMLDxpDirectSceneElement;
        new (): HTMLDxpDirectSceneElement;
    };
    interface HTMLDxpExperienceElement extends Components.DxpExperience, HTMLStencilElement {
    }
    var HTMLDxpExperienceElement: {
        prototype: HTMLDxpExperienceElement;
        new (): HTMLDxpExperienceElement;
    };
    interface HTMLDxpExperienceDemoElement extends Components.DxpExperienceDemo, HTMLStencilElement {
    }
    var HTMLDxpExperienceDemoElement: {
        prototype: HTMLDxpExperienceDemoElement;
        new (): HTMLDxpExperienceDemoElement;
    };
    interface HTMLDxpFormSceneElement extends Components.DxpFormScene, HTMLStencilElement {
    }
    var HTMLDxpFormSceneElement: {
        prototype: HTMLDxpFormSceneElement;
        new (): HTMLDxpFormSceneElement;
    };
    interface HTMLDxpShowElement extends Components.DxpShow, HTMLStencilElement {
    }
    var HTMLDxpShowElement: {
        prototype: HTMLDxpShowElement;
        new (): HTMLDxpShowElement;
    };
    interface HTMLDxpTocSceneElement extends Components.DxpTocScene, HTMLStencilElement {
    }
    var HTMLDxpTocSceneElement: {
        prototype: HTMLDxpTocSceneElement;
        new (): HTMLDxpTocSceneElement;
    };
    interface HTMLDxpVideoPlayerElement extends Components.DxpVideoPlayer, HTMLStencilElement {
    }
    var HTMLDxpVideoPlayerElement: {
        prototype: HTMLDxpVideoPlayerElement;
        new (): HTMLDxpVideoPlayerElement;
    };
    interface HTMLDxpVideoSceneElement extends Components.DxpVideoScene, HTMLStencilElement {
    }
    var HTMLDxpVideoSceneElement: {
        prototype: HTMLDxpVideoSceneElement;
        new (): HTMLDxpVideoSceneElement;
    };
    interface HTMLElementTagNameMap {
        "content-scene": HTMLContentSceneElement;
        "dxp-action-listener": HTMLDxpActionListenerElement;
        "dxp-data": HTMLDxpDataElement;
        "dxp-data-provider": HTMLDxpDataProviderElement;
        "dxp-direct-scene": HTMLDxpDirectSceneElement;
        "dxp-experience": HTMLDxpExperienceElement;
        "dxp-experience-demo": HTMLDxpExperienceDemoElement;
        "dxp-form-scene": HTMLDxpFormSceneElement;
        "dxp-show": HTMLDxpShowElement;
        "dxp-toc-scene": HTMLDxpTocSceneElement;
        "dxp-video-player": HTMLDxpVideoPlayerElement;
        "dxp-video-scene": HTMLDxpVideoSceneElement;
    }
}
declare namespace LocalJSX {
    interface ContentScene {
    }
    interface DxpActionListener {
        /**
          * When debug is true, a reactive table of values is displayed.
         */
        "debug"?: boolean;
        /**
          * Customize the name used for this sample data provider.
         */
        "name"?: string;
    }
    interface DxpData {
        /**
          * A default value to display if the data in get is not found.
         */
        "default"?: string;
        /**
          * The JS-based expression to capture data from the above model.
          * @example experience.data.color
         */
        "get": string;
        /**
          * A pipe separated list of modifier expressions to modify the captured data. clip: length    truncate: length   date   format: expression   lowercase   uppercase   capitalize   size   encode   currency
          * @example clip:5|capitalize
         */
        "modify"?: string;
    }
    interface DxpDataProvider {
    }
    interface DxpDirectScene {
        "tocOptions"?: object;
    }
    interface DxpExperience {
        /**
          * Enable Debug mode to prevent API calls. (falls back to ?debug )
          * @default false
         */
        "debug"?: boolean;
        /**
          * Display mode for this element.
          * @default none
         */
        "display"?: 'logo' | 'debug' | 'none';
        /**
          * Experience data (bypasses XAPI to retrieve it)
         */
        "experienceData"?: string;
        /**
          * Enable Debug mode to prevent API calls.
          * @default false
         */
        "loadAssets"?: boolean;
        /**
          * The platform environment target. (optional)
         */
        "namespace"?: Namespace;
        /**
          * When an experience is unable to be retrieved, this event fires with 'event.detail' = error message.
         */
        "onDxp:errored"?: (event: CustomEvent<string>) => void;
        /**
          * When an experience is retrieved, this event fires with 'event.detail' being the full experience, w/ data methods like 'setData()' and 'setComplete()'.
         */
        "onDxp:initialized"?: (event: CustomEvent<Experience>) => void;
        /**
          * This event is raised when reset() is called.
         */
        "onDxp:reset"?: (event: CustomEvent<void>) => void;
        /**
          * Enable preview mode to fake data and prevent API calls. (falls back to ?preview )
          * @default false
         */
        "preview"?: boolean;
        /**
          * Story Key (falls back to ?storyKey )
         */
        "storyKey"?: string;
        /**
          * User Key (falls back to ?userKey )
         */
        "userKey"?: string;
        /**
          * Experience API Url (optional)
         */
        "xapiUrl"?: string;
    }
    interface DxpExperienceDemo {
    }
    interface DxpFormScene {
    }
    interface DxpShow {
        /**
          * A JS-based expression to capture data from the the data model.
          * @example : experience.data.color
         */
        "if": string;
        /**
          * The optional comparison operator. If omitted, general ‘truthiness’ is used.
          * @requires to
         */
        "is"?: Comparison;
        /**
          * The optional value for comparison.
          * @requires is
         */
        "to"?: any;
    }
    interface DxpTocScene {
        "tocOptions"?: object;
    }
    interface DxpVideoPlayer {
        "youtubeId"?: string;
    }
    interface DxpVideoScene {
        "buttonLabel"?: string;
        "ccUrl"?: string;
        "mainTitle"?: string;
        "posterUrl"?: string;
        "subtitle"?: string;
        "videoUrl"?: string;
    }
    interface IntrinsicElements {
        "content-scene": ContentScene;
        "dxp-action-listener": DxpActionListener;
        "dxp-data": DxpData;
        "dxp-data-provider": DxpDataProvider;
        "dxp-direct-scene": DxpDirectScene;
        "dxp-experience": DxpExperience;
        "dxp-experience-demo": DxpExperienceDemo;
        "dxp-form-scene": DxpFormScene;
        "dxp-show": DxpShow;
        "dxp-toc-scene": DxpTocScene;
        "dxp-video-player": DxpVideoPlayer;
        "dxp-video-scene": DxpVideoScene;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "content-scene": LocalJSX.ContentScene & JSXBase.HTMLAttributes<HTMLContentSceneElement>;
            "dxp-action-listener": LocalJSX.DxpActionListener & JSXBase.HTMLAttributes<HTMLDxpActionListenerElement>;
            "dxp-data": LocalJSX.DxpData & JSXBase.HTMLAttributes<HTMLDxpDataElement>;
            "dxp-data-provider": LocalJSX.DxpDataProvider & JSXBase.HTMLAttributes<HTMLDxpDataProviderElement>;
            "dxp-direct-scene": LocalJSX.DxpDirectScene & JSXBase.HTMLAttributes<HTMLDxpDirectSceneElement>;
            "dxp-experience": LocalJSX.DxpExperience & JSXBase.HTMLAttributes<HTMLDxpExperienceElement>;
            "dxp-experience-demo": LocalJSX.DxpExperienceDemo & JSXBase.HTMLAttributes<HTMLDxpExperienceDemoElement>;
            "dxp-form-scene": LocalJSX.DxpFormScene & JSXBase.HTMLAttributes<HTMLDxpFormSceneElement>;
            "dxp-show": LocalJSX.DxpShow & JSXBase.HTMLAttributes<HTMLDxpShowElement>;
            "dxp-toc-scene": LocalJSX.DxpTocScene & JSXBase.HTMLAttributes<HTMLDxpTocSceneElement>;
            "dxp-video-player": LocalJSX.DxpVideoPlayer & JSXBase.HTMLAttributes<HTMLDxpVideoPlayerElement>;
            "dxp-video-scene": LocalJSX.DxpVideoScene & JSXBase.HTMLAttributes<HTMLDxpVideoSceneElement>;
        }
    }
}
